package edu.northeastern.cs5500.moviebot.listeners;

import edu.northeastern.cs5500.moviebot.messageBuilder.MovieMessageBuilder;
import info.movito.themoviedbapi.model.MovieDb;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.*;
import net.dv8tion.jda.api.events.interaction.ButtonClickEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import org.jetbrains.annotations.NotNull;

/** ButtonListener is the listener for button click events */
public class ButtonListener extends ListenerAdapter {
    @Getter private final Map<String, ViewState> channelIDToState;

    public ButtonListener() {
        channelIDToState = new HashMap<>();
    }

    /**
     * This method is executed when user clicks on a button
     *
     * @param event ButtonClickEvent generated by jda
     */
    @Override
    public void onButtonClick(@NotNull ButtonClickEvent event) {
        super.onButtonClick(event);

        ViewState state = channelIDToState.get(event.getMessageChannel().getId());

        if (state != null) {
            switch (event.getComponentId()) {
                case "next":
                    handleNext(event, state);
                    break;
                case "prev":
                    handlePrev(event, state);
                    break;
            }
        }
    }

    /**
     * Register a communication to the listener
     *
     * @param messageChannelId messageChannelId where the communication/command is started
     * @param movieList the movielist to populate to user
     */
    public void addCommunication(String messageChannelId, List<MovieDb> movieList) {
        channelIDToState.put(messageChannelId, new ViewState(movieList, 0));
    }

    private void handleNext(ButtonClickEvent event, ViewState state) {
        List<MovieDb> movieList = state.getMovieList();
        int index = state.getIndex();
        if (index < movieList.size() - 1) {
            MovieDb movie = movieList.get(++index);
            state.setIndex(index);
            event.editMessageEmbeds(MovieMessageBuilder.embedFromMovieDb(movie)).queue();
        } else {
            event.editMessageEmbeds(MovieMessageBuilder.embedFromMovieDb(movieList.get(index)))
                    .queue();
        }
    }

    private void handlePrev(ButtonClickEvent event, ViewState state) {
        List<MovieDb> movieList = state.getMovieList();
        int index = state.getIndex();
        if (index > 0) {
            MovieDb movie = movieList.get(--index);
            state.setIndex(index);
            event.editMessageEmbeds(MovieMessageBuilder.embedFromMovieDb(movie)).queue();
        } else {
            event.editMessageEmbeds(MovieMessageBuilder.embedFromMovieDb(movieList.get(index)))
                    .queue();
        }
    }
}

/** This object stores the state of viewing a movie list */
@AllArgsConstructor
class ViewState {
    @Getter @Setter private List<MovieDb> movieList;
    @Getter @Setter private int index;
}
